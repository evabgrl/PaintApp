import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.ArrayList;

public class PaintApp extends JFrame {
    private ArrayList<Shape> shapes; // List to store the drawn shapes
    private String currentShape; // Current selected shape
    private Color currentColor; // Current selected color
    private int startX, startY; // Starting coordinates for tracing a shape
    private int endX, endY; // Ending coordinates for tracing a shape

    public PaintApp() {
        shapes = new ArrayList<>();
        currentShape = "Line";
        currentColor = Color.BLACK; // Default color is set to black

        // Create the menu and add shape and color options
        JMenuBar menuBar = new JMenuBar();
        JMenu shapeMenu = new JMenu("Shapes");
        JMenu colorMenu = new JMenu("Color");
        JMenuItem lineItem = new JMenuItem("Line");
        JMenuItem outlineRectItem = new JMenuItem("Outline Rectangle");
        JMenuItem filledRectItem = new JMenuItem("Filled Rectangle");

        lineItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                currentShape = "Line";
            }
        });

        outlineRectItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                currentShape = "OutlineRectangle";
            }
        });

        filledRectItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                currentShape = "FilledRectangle";
            }
        });

        shapeMenu.add(lineItem);
        shapeMenu.add(outlineRectItem);
        shapeMenu.add(filledRectItem);

        ActionListener colorMenuItemListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String colorString = e.getActionCommand();
                currentColor = parseColor(colorString);
            }
        };

        JMenuItem redColorItem = new JMenuItem("Red");
        redColorItem.addActionListener(colorMenuItemListener);
        JMenuItem blueColorItem = new JMenuItem("Blue");
        blueColorItem.addActionListener(colorMenuItemListener);
        JMenuItem greenColorItem = new JMenuItem("Green");
        greenColorItem.addActionListener(colorMenuItemListener);

        colorMenu.add(redColorItem);
        colorMenu.add(blueColorItem);
        colorMenu.add(greenColorItem);

        menuBar.add(shapeMenu);
        menuBar.add(colorMenu);
        setJMenuBar(menuBar);

        // Set up the frame properties
        setTitle("Paint App");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Add mouse listeners to handle drawing
        addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                startX = e.getX();
                startY = e.getY();
                endX = startX;
                endY = startY;
                repaint();
            }

            public void mouseReleased(MouseEvent e) {
                endX = e.getX();
                endY = e.getY();
                Shape shape = createShape(startX, startY, endX, endY);
                shapes.add(shape);
                repaint();
            }
        });

        addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent e) {
                endX = e.getX();
                endY = e.getY();
                repaint();
            }
        });
    }

    private Shape createShape(int x1, int y1, int x2, int y2) {
        if (currentShape.equals("Line")) {
            return new Line(x1, y1, x2, y2, currentColor);
        } else if (currentShape.equals("OutlineRectangle")) {
            return new OutlineRectangle(x1, y1, x2, y2, currentColor);
        } else if (currentShape.equals("FilledRectangle")) {
            return new FilledRectangle(x1, y1, x2, y2, currentColor);
        } else {
            return null;
        }
    }

    public void paint(Graphics g) {
        super.paint(g);
        for (Shape shape : shapes) {
            shape.draw(g);
        }
        if (currentShape.equals("Line") || currentShape.equals("OutlineRectangle") || currentShape.equals("FilledRectangle")) {
            drawPreviewShape(g);
        }
    }

    private void drawPreviewShape(Graphics g) {
        g.setColor(currentColor);
        if (currentShape.equals("Line")) {
            g.drawLine(startX, startY, endX, endY);
        } else if (currentShape.equals("OutlineRectangle")) {
            int width = endX - startX;
            int height = endY - startY;
            g.drawRect(startX, startY, width, height);
        } else if (currentShape.equals("FilledRectangle")) {
            int width = endX - startX;
            int height = endY - startY;
            g.fillRect(startX, startY, width, height);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new PaintApp().setVisible(true);
            }
        });
    }

    private Color parseColor(String colorString) {
        switch (colorString) {
            case "Red":
                return Color.RED;
            case "Blue":
                return Color.BLUE;
            case "Green":
                return Color.GREEN;
            default:
                return Color.BLACK;
        }
    }
}

interface Shape {
    void draw(Graphics g);
}

class Line implements Shape {
    private int x1, y1, x2, y2;
    private Color color;

    public Line(int x1, int y1, int x2, int y2, Color color) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.color = color;
    }

    public void draw(Graphics g) {
        g.setColor(color);
        g.drawLine(x1, y1, x2, y2);
    }
}

class OutlineRectangle implements Shape {
    private int x, y, width, height;
    private Color color;

    public OutlineRectangle(int x1, int y1, int x2, int y2, Color color) {
        this.x = Math.min(x1, x2);
        this.y = Math.min(y1, y2);
        this.width = Math.abs(x2 - x1);
        this.height = Math.abs(y2 - y1);
        this.color = color;
    }

    public void draw(Graphics g) {
        g.setColor(color);
        g.drawRect(x, y, width, height);
    }
}

class FilledRectangle implements Shape {
    private int x, y, width, height;
    private Color color;

    public FilledRectangle(int x1, int y1, int x2, int y2, Color color) {
        this.x = Math.min(x1, x2);
        this.y = Math.min(y1, y2);
        this.width = Math.abs(x2 - x1);
        this.height = Math.abs(y2 - y1);
        this.color = color;
    }

    public void draw(Graphics g) {
        g.setColor(color);
        g.fillRect(x, y, width, height);
    }
}
